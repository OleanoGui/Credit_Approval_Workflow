📌 Project: Credit Approval Workflow
Description: A backend system that manages credit requests, going through different approval stages before final 
approval.

🔹 Technologies

Python – Main programming language
FastAPI – Framework for APIs
Celery + Redis – For asynchronous processing of approvals
RabbitMQ/Kafka – For service-to-service messaging
PostgreSQL – Database to store credit requests
OAuth2 + JWT – Authentication and access control
Docker – To simplify the development environment



🚀 Approval Workflow
1️⃣ Credit Request
The user submits a request with financial data
The request is placed in a processing queue

2️⃣ Automatic Analysis
The system checks credit score, income, and financial history
If approved, the request moves to human approval

3️⃣ Managerial Approval
The request goes through different levels of approval (e.g., analyst → manager → director)
Each approver receives a notification and can approve or reject

4️⃣ Final Decision
If all approval stages are completed, the credit is granted
The user is notified of the final status



🔹 Project Structure

📂 models.py → Table definitions (CreditRequest, User, ApprovalStage)
📂 routes.py → API routes to create requests and check status
📂 tasks.py → Asynchronous processing using Celery
📂 messaging.py → Communication between services using RabbitMQ/Kafka
📂 auth.py → User authentication and permission control

🔹 Frontend

O frontend foi desenvolvido em React, utilizando Material UI para a interface e Axios para comunicação com o backend.

Principais funcionalidades:
- Tela de login com autenticação JWT
- Cadastro de usuários
- Criação e acompanhamento de solicitações de crédito
- Visualização do status das solicitações
- Diferentes telas e permissões conforme o papel do usuário (admin, manager, user)

Para rodar o frontend localmente:
```bash
cd frontend
npm install
npm start

## 📊 Observability: Prometheus & Grafana

This project exposes application metrics at `/metrics` using [prometheus_fastapi_instrumentator](https://github.com/trallard/prometheus-fastapi-instrumentator).

## Example panel query

- `http_server_requests_total` — total HTTP requests by endpoint/method/status
- `http_request_duration_seconds_count` — request duration count

## Requirements

- Docker Desktop
- Python dependencies: `prometheus-fastapi-instrumentator`
